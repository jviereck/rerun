// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/camera_views.fbs".

#pragma once

#include "../../datatypes/vec3d.hpp"
#include "../../result.hpp"

#include <array>
#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Target of a camera.
    struct CameraTarget {
        /// Position of the camera target.
        rerun::datatypes::Vec3D pos;

      public:
        CameraTarget() = default;

        CameraTarget(rerun::datatypes::Vec3D pos_) : pos(pos_) {}

        CameraTarget& operator=(rerun::datatypes::Vec3D pos_) {
            pos = pos_;
            return *this;
        }

        CameraTarget(std::array<float, 3> xyz_) : pos(xyz_) {}

        CameraTarget& operator=(std::array<float, 3> xyz_) {
            pos = xyz_;
            return *this;
        }

        /// Cast to the underlying Vec3D datatype
        operator rerun::datatypes::Vec3D() const {
            return pos;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Vec3D) == sizeof(blueprint::components::CameraTarget));

    /// \private
    template <>
    struct Loggable<blueprint::components::CameraTarget> {
        static constexpr const char Name[] = "rerun.blueprint.components.CameraTarget";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Vec3D>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::CameraTarget` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::CameraTarget* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Vec3D>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Vec3D>::to_arrow(&instances->pos, num_instances);
            }
        }
    };
} // namespace rerun
