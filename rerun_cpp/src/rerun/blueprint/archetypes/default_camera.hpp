// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/default_camera.fbs".

#pragma once

#include "../../blueprint/components/camera_origin.hpp"
#include "../../blueprint/components/camera_target.hpp"
#include "../../collection.hpp"
#include "../../compiler_utils.hpp"
#include "../../component_batch.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: Defines a default camera view.
    struct DefaultCamera {
        /// Origin of the camera view.
        std::optional<rerun::blueprint::components::CameraOrigin> origin;

        /// Target of the camera view.
        std::optional<rerun::blueprint::components::CameraTarget> target;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.blueprint.components.DefaultCameraIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        DefaultCamera() = default;
        DefaultCamera(DefaultCamera&& other) = default;

        /// Origin of the camera view.
        DefaultCamera with_origin(rerun::blueprint::components::CameraOrigin _origin) && {
            origin = std::move(_origin);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Target of the camera view.
        DefaultCamera with_target(rerun::blueprint::components::CameraTarget _target) && {
            target = std::move(_target);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::DefaultCamera> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(
            const blueprint::archetypes::DefaultCamera& archetype
        );
    };
} // namespace rerun
